{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\React\\\\learning-react\\\\advanced-react-router-dom\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from \"react\";\nimport { useLoaderData, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(Await, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError: true, message: 'Failed to fetch events'};\n    throw new Response(JSON.stringify({\n      message: \"Failed to fetch events\"\n    }), {\n      status: 500\n    });\n  }\n  return response;\n}\nexport function loader() {\n  return {\n    events: loadEvents()\n  };\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","useLoaderData","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["D:/Work/React/learning-react/advanced-react-router-dom/frontend/src/pages/Events.js"],"sourcesContent":["import { Suspense } from \"react\";\nimport { useLoaderData, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n\n  const events = data.events;\n\n  return (\n    <Await></Await>\n  );\n}\n\nexport default EventsPage;\nasync function loadEvents(){\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError: true, message: 'Failed to fetch events'};\n    throw new Response(JSON.stringify({ message: \"Failed to fetch events\" }), {\n      status: 500,\n    });\n  }\n  return response;\n}\nexport function loader() {\n return {\n  events: loadEvents()\n };\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,KAAK,QAAQ,kBAAkB;AACvD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;EAE5B,MAAMQ,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBACEJ,OAAA,CAACH,KAAK;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEnB;AAACN,EAAA,CARQD,UAAU;EAAA,QACJL,aAAa;AAAA;AAAAa,EAAA,GADnBR,UAAU;AAUnB,eAAeA,UAAU;AACzB,eAAeS,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAyB,CAAC,CAAC,EAAE;MACxEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EACA,OAAOP,QAAQ;AACjB;AACA,OAAO,SAASQ,MAAMA,CAAA,EAAG;EACxB,OAAO;IACNf,MAAM,EAAEM,UAAU,CAAC;EACpB,CAAC;AACF;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}